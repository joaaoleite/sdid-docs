
package pt.ulisboa.tecnico.sdis.store.ws;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.HandlerChain;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SDStore", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws")
@HandlerChain(file = "SDStore_handler.xml")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SDStore {


    /**
     * 
     * @param docUserPair
     * @return
     *     returns javax.xml.ws.Response<pt.ulisboa.tecnico.sdis.store.ws.CreateDocResponse>
     */
    @WebMethod(operationName = "createDoc")
    @RequestWrapper(localName = "createDoc", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.CreateDoc")
    @ResponseWrapper(localName = "createDocResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.CreateDocResponse")
    public Response<CreateDocResponse> createDocAsync(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair);

    /**
     * 
     * @param docUserPair
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createDoc")
    @RequestWrapper(localName = "createDoc", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.CreateDoc")
    @ResponseWrapper(localName = "createDocResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.CreateDocResponse")
    public Future<?> createDocAsync(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateDocResponse> asyncHandler);

    /**
     * 
     * @param docUserPair
     * @throws DocAlreadyExists_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "createDoc", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.CreateDoc")
    @ResponseWrapper(localName = "createDocResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.CreateDocResponse")
    public void createDoc(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair)
        throws DocAlreadyExists_Exception
    ;

    /**
     * 
     * @param userId
     * @return
     *     returns javax.xml.ws.Response<pt.ulisboa.tecnico.sdis.store.ws.ListDocsResponse>
     */
    @WebMethod(operationName = "listDocs")
    @RequestWrapper(localName = "listDocs", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.ListDocs")
    @ResponseWrapper(localName = "listDocsResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.ListDocsResponse")
    public Response<ListDocsResponse> listDocsAsync(
        @WebParam(name = "userId", targetNamespace = "")
        String userId);

    /**
     * 
     * @param asyncHandler
     * @param userId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "listDocs")
    @RequestWrapper(localName = "listDocs", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.ListDocs")
    @ResponseWrapper(localName = "listDocsResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.ListDocsResponse")
    public Future<?> listDocsAsync(
        @WebParam(name = "userId", targetNamespace = "")
        String userId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ListDocsResponse> asyncHandler);

    /**
     * 
     * @param userId
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws UserDoesNotExist_Exception
     */
    @WebMethod
    @WebResult(name = "documentId", targetNamespace = "")
    @RequestWrapper(localName = "listDocs", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.ListDocs")
    @ResponseWrapper(localName = "listDocsResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.ListDocsResponse")
    public List<String> listDocs(
        @WebParam(name = "userId", targetNamespace = "")
        String userId)
        throws UserDoesNotExist_Exception
    ;

    /**
     * 
     * @param contents
     * @param docUserPair
     * @return
     *     returns javax.xml.ws.Response<pt.ulisboa.tecnico.sdis.store.ws.StoreResponse>
     */
    @WebMethod(operationName = "store")
    @RequestWrapper(localName = "store", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.Store")
    @ResponseWrapper(localName = "storeResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.StoreResponse")
    public Response<StoreResponse> storeAsync(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair,
        @WebParam(name = "contents", targetNamespace = "")
        byte[] contents);

    /**
     * 
     * @param contents
     * @param docUserPair
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "store")
    @RequestWrapper(localName = "store", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.Store")
    @ResponseWrapper(localName = "storeResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.StoreResponse")
    public Future<?> storeAsync(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair,
        @WebParam(name = "contents", targetNamespace = "")
        byte[] contents,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<StoreResponse> asyncHandler);

    /**
     * 
     * @param contents
     * @param docUserPair
     * @throws DocDoesNotExist_Exception
     * @throws UserDoesNotExist_Exception
     * @throws CapacityExceeded_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "store", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.Store")
    @ResponseWrapper(localName = "storeResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.StoreResponse")
    public void store(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair,
        @WebParam(name = "contents", targetNamespace = "")
        byte[] contents)
        throws CapacityExceeded_Exception, DocDoesNotExist_Exception, UserDoesNotExist_Exception
    ;

    /**
     * 
     * @param docUserPair
     * @return
     *     returns javax.xml.ws.Response<pt.ulisboa.tecnico.sdis.store.ws.LoadResponse>
     */
    @WebMethod(operationName = "load")
    @RequestWrapper(localName = "load", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.Load")
    @ResponseWrapper(localName = "loadResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.LoadResponse")
    public Response<LoadResponse> loadAsync(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair);

    /**
     * 
     * @param docUserPair
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "load")
    @RequestWrapper(localName = "load", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.Load")
    @ResponseWrapper(localName = "loadResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.LoadResponse")
    public Future<?> loadAsync(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<LoadResponse> asyncHandler);

    /**
     * 
     * @param docUserPair
     * @return
     *     returns byte[]
     * @throws DocDoesNotExist_Exception
     * @throws UserDoesNotExist_Exception
     */
    @WebMethod
    @WebResult(name = "contents", targetNamespace = "")
    @RequestWrapper(localName = "load", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.Load")
    @ResponseWrapper(localName = "loadResponse", targetNamespace = "urn:pt:ulisboa:tecnico:sdis:store:ws", className = "pt.ulisboa.tecnico.sdis.store.ws.LoadResponse")
    public byte[] load(
        @WebParam(name = "docUserPair", targetNamespace = "")
        DocUserPair docUserPair)
        throws DocDoesNotExist_Exception, UserDoesNotExist_Exception
    ;

}
