package client;

import pt.ulisboa.tecnico.sdis.id.ws.*;

import org.junit.*;
import org.junit.runners.MethodSorters;
import static org.junit.Assert.*;
import client.Encryption;

/**
 *  Test suite
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class IDTest {

    // static members
    private static SDId port;



    // one-time initialization and clean-up

    @BeforeClass
    public static void oneTimeSetUp() {

        SDId_Service service = new SDId_Service();
        port = service.getSDIdImplPort();
    }

    @AfterClass
    public static void oneTimeTearDown() {
        port=null;
    }


    // members


    // initialization and clean-up for each test

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }


    // tests

    @Test
    public void test01(){

        String result="";
        String expected="";

        try{ port.createUser("Madalena","madalena@mail.com");} 
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test02(){

        String result="";
        String expected="User Already Exists";

        try{ port.createUser("Madalena","madalena2@mail.com");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test03(){

        String result="";
        String expected="Email Already Exists";

        try{ port.createUser("Outra Madalena","madalena@mail.com");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test04(){

        String result="";
        String expected="Invalid Email Address";

        try{ port.createUser("Terceira Madalena","madalena.com");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test05(){

        String result="";
        String expected="Invalid Email Address";

        try{ port.createUser("Quarta Madalena","@madalena.com");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test06(){

        String result="";
        String expected="Invalid Email Address";

        try{ port.createUser("Quinta Madalena","madalena@");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test07(){

        String result="";
        String expected="Invalid User";

        try{ port.createUser("","madalenavazia@mail.com");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test08(){

        String result="";
        String expected="Invalid User";

        try{ port.createUser(null,"madalenanull@mail.com");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test09(){

        String result="";
        String expected="User Does Not Exists";

        try{ port.renewPassword(null);}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test10(){

        String result="";
        String expected="";

        try{ port.renewPassword("Madalena");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test11(){

        String result="";
        String expected="User Does Not Exists";

        try{ port.removeUser("Manel");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test12(){

        String result="";
        String expected="";

        try{ port.removeUser("bruno");}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test13(){

        byte[] result=null;
        String expected="";

        try{ 
            Encryption encryption = new Encryption();
            byte[] service_bytes = "sd-store".getBytes("UTF-8");
            byte[] number_bytes = encryption.generateKey();
            byte[] toSend = new byte[service_bytes.length + number_bytes.length];
            byte[] result = port.requestAuthentication("alice", toSend);
        }
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test14(){

        String result="";
        String expected="Authentication Failed";

        try{ port.requestAuthentication("alice","jsdygj".getBytes());}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }

    @Test
    public void test15(){

        String result="";
        String expected="Authentication Failed";

        try{ port.requestAuthentication("manel","jsdygj".getBytes());}
        catch(Exception e){ result=e.getMessage(); }

        assertEquals(expected,result);
    }





}